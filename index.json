[{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eAs part of my new job, I am around csv files quite a lot. One of the tasks internally was to design and create a package which read common csv files for the company, as a NuGet package, so it could be used across internal company tools.\u003c/p\u003e\n\u003cp\u003eNow, instead of writing an entire CSV parser, I decided to use an existing package, with a small intermediary layer which implemented business-specific details, such as models, and simpler interface.\u003c/p\u003e\n\u003cp\u003eThe two main contesters were:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/MarcosMeli/FileHelpers\"\u003eFileHelpers\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/JoshClose/CsvHelper\"\u003eCsvHelper\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eSo the next step was to do some \u003ca href=\"https://github.com/dotnet/BenchmarkDotNet\"\u003ebenchmarking\u003c/a\u003e.\u003c/p\u003e\n\u003ch1 id=\"benchmark-setup\"\u003eBenchmark Setup\u003c/h1\u003e\n\u003cp\u003eYou can find the benchmarking code \u003ca href=\"https://github.com/pippinmole/CsvBenchmarks.NET\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003ch3 id=\"dataset\"\u003eDataset\u003c/h3\u003e\n\u003cp\u003eThe data I used is \u003ca href=\"https://www.kaggle.com/datasets/camnugent/sandp500\"\u003eHistorical stock data for all current S\u0026amp;P 500 companies\u003c/a\u003e, which contains 600,000 stock records.\u003c/p\u003e\n\u003ch3 id=\"considerations\"\u003eConsiderations\u003c/h3\u003e\n\u003cp\u003eThese packages use reflection under the hood most of the time, to get information from the models such as:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eField Order\u003c/strong\u003e: Defines which csv column index matches with which property in a given model\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Converters\u003c/strong\u003e: For complex objects, a custom converter can be used to convert from string to object, and back to string.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eCustom Titles\u003c/strong\u003e: For writing back to csv files, sometimes you want the headers to be different from the property names.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u0026hellip; which means that the constructor for the engine can be quite costly (because reflection in .NET is costly). To factor this in, I constructed the benchmarks to cache the engine where possible.\u003c/p\u003e\n\u003ch3 id=\"benchmarks\"\u003eBenchmarks\u003c/h3\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/benchmarking-csv-parsers/csvbenchmarkscode.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eWe\u0026rsquo;re testing on reading of 1, 100, 10,000, 50,000, 150,000 and 500,000 rows, which should hopefully show the overhead of both engines, and how the performance changes with size.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eUnfortunatly, CsvHelper doesn\u0026rsquo;t provide a way of caching the engine. Once a stream has been read, the CsvHelper object can\u0026rsquo;t be used again :(\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch1 id=\"benchmark-results\"\u003eBenchmark Results\u003c/h1\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/benchmarking-csv-parsers/benchmarkresults.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eUsing these numbers, a number of conclusions can be made:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eFileHelpers is create for small datasets, with up to 3x performance and memory.\u003c/li\u003e\n\u003cli\u003ePerformance across both packages are very similar with large datasets.\u003c/li\u003e\n\u003cli\u003eFor FileHelpers, cache your engine if you can.\u003c/li\u003e\n\u003cli\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eI would have liked to benchmark all of this on .NET 8 too, however due to a \u003ca href=\"https://github.com/dotnet/BenchmarkDotNet/issues/2439\"\u003ebug in .NET 8 RC1\u003c/a\u003e, I will have to wait for RC2 to fully test performance. I expect that .NET 8 will be faster, but it will be interesting to see by \u003cstrong\u003ehow\u003c/strong\u003e much.\u003c/p\u003e\n\u003ch1 id=\"other-comparisons\"\u003eOther comparisons\u003c/h1\u003e\n\u003cp\u003ePersonally, I have found FileHelpers to be all-round better than CsvHelper. This is due to how simple it is to\u003c/p\u003e\n\u003cp\u003eThe benefits of CsvHelper over FileHelpers are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCsvHelper has async parsing, which would be great for use in APIs.\u003c/li\u003e\n\u003cli\u003e\u003ccode\u003eGetRecords\u003c/code\u003e streams results back via \u003ccode\u003eIEnumerable\u0026lt;T\u0026gt;\u003c/code\u003e, which is great for large datasets. FileHelper returns \u003ccode\u003eT[]\u003c/code\u003e, allocating everything into memory ðŸ‘Ž.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThe benefits of FileHelpers over CsvHelper are:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eSimpler API interface\u003c/li\u003e\n\u003cli\u003eSeemingly more control over errors when parsing\u003c/li\u003e\n\u003c/ol\u003e\n","description":"Benchmarking different .NET CSV Parsers","image":null,"permalink":"https://hugo-profile.netlify.app/posts/benchmarking-csv-parsers/","title":"Benchmarking .NET CSV Parsers"},{"content":"\u003cp\u003eThese screenshots are arranged in no specific order or preference\u003c/p\u003e\n\u003cp\u003e\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/02ad7a17baf722e93b3b177038e5d707.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/03b56070b4d80774af67dfb996c5f46a.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/04d3dccdaaa7cb7cb275344e06e8d57f.png\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/05bdf528211f479f1abddc7203b79adb.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/0bc381ef0f27013cfc86afb5c3522b8f.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/0c65b391d5b192dac2505b263b1105a5.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/1e85b93fb5e52eb1056d6785c52bd708.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/24a729285daad7f66304f982e478ffff.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/2e97755f46ab222b2e2a41f7aa633aba.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/2ebd2f424060efb661017b57d8c44ee6.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/2f6cbcfbf1890df08baed29788068025.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/3916f3478662266ff33d6565b2686e47.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/3baa4718813e997940b175168ed6a37a.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/3c2a483b896d9b774a6977d2d3284e54.png\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/3fabc317c30515cc75e7ac700260f5ea.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/4d19cd71a78367cd8ed92f84dcfb2321.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/4d32c9ed8e347b354b14c8bb91d92b9b.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/4e932ec5e623622c62018c250a4a2e1c.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/56dacd12b2903a7ca75e527521962906.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/5aa8146ab438edb9fd5a2f219ea2acb6.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/5d03c992f72b3adec7652e7f42f88b28.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/5d77ed6a19266c5120e878f14ead8149.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/6719f57c42c192880d19a7b6671416e9.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/6e29d0a466eca610c83faa38b9122534.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/70007813eb63c4bd6a9e508695a3f55d.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/7ae5c81a2602152606fe60555d0de0bf.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/7b7c2f6914ab1b75bcae78a203002060.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/7b7e44dedd02c1f47c299591ea64f12f.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/7c494189fe2c323237e836e9c7549ffb.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/7e28a4c7f4681d4a08ddefbf6aafeede.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/86d9652be5db8a573669bc3f79803a88.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/87d6f08b42ce3601ef2e454415804b7f.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/8d4a0c4704404bddd7dafee6cf6ee812.png\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/a62fc6af658d2c6b54042bfbed6dd8df.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/a86c1368ec276c60f22acef3c6ccd40d.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/bef18d54eef7a502648b4a25adc09f3a.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/c43e257cb9b6986f2aa7e51f461e2e17.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/d062205bdc48b048eff9b2307907219e.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/ea09967dcffd86d460af4b7a8a6ddc4f.gif\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/decay-photodump/f0da41b111341f03f055db167a0fedd5.png\"   loading=\"lazy\"   /\u003e\n    \n\n    \n\u003c/figure\u003e\n\u003c/p\u003e\n","description":"I have so many Decay screenshots","image":null,"permalink":"https://hugo-profile.netlify.app/posts/decay-photos/","title":"A Decay Photodump"},{"content":"\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/using-hugo/hugo_logo.png\"    style=\"width:95%\"  /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003ch2 id=\"why-hugo\"\u003eWhy Hugo?\u003c/h2\u003e\n\u003cp\u003eIf you choose to build your portfolio site using only HTML and CSS, you may run into the issue of repetitive code.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eExample: Let\u0026rsquo;s say you have a blog post called \u003ccode\u003emy-blog-post.html\u003c/code\u003e and you want to create another post.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhat do you do? You could duplicate the file and rewrite the content, but what if you change the layout of the post? You have to make the change in every file!\u003c/p\u003e\n\u003cp\u003eThat\u0026rsquo;s where Hugo comes in as a solution. Hugo is a tool that helps you avoid repetition in your code and allows you to focus on creating content rather than worrying about the technical details.\u003c/p\u003e\n\u003ch2 id=\"what-is-hugo\"\u003eWhat is Hugo?\u003c/h2\u003e\n\u003cp\u003eHugo solves the issue explained in the section above; Originally created by Steve Francia in 2013, Hugo is a popular static site generator that allows you to quickly create websites using simple templates and content written in Markdown or HTML.\u003c/p\u003e\n\u003cp\u003eAlso it\u0026rsquo;s written in \u003ca href=\"https://go.dev/\"\u003eGolang\u003c/a\u003e, so it\u0026rsquo;s \u003ca href=\"https://forestry.io/blog/hugo-vs-jekyll-benchmark/\"\u003eblazingly fast\u003c/a\u003e.\u003c/p\u003e\n\u003ch2 id=\"installation\"\u003eInstallation\u003c/h2\u003e\n\u003cp\u003eInterested? Installation steps are extremely easy to follow:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eWindows: \u003ca href=\"https://gohugo.io/installation/windows/\"\u003ehttps://gohugo.io/installation/windows/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eMac: \u003ca href=\"https://gohugo.io/installation/macos/\"\u003ehttps://gohugo.io/installation/macos/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eLinux: \u003ca href=\"https://gohugo.io/installation/linux/\"\u003ehttps://gohugo.io/installation/linux/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eBSD: \u003ca href=\"https://gohugo.io/installation/bsd/\"\u003ehttps://gohugo.io/installation/bsd/\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can verify Hugo has been installed correctly by running the following command:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehugo version\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"creating-a-project\"\u003eCreating a project\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eCreate a Hugo project and create Git repository\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehugo new site quickstart\ncd quickstart\ngit init\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"2\"\u003e\n\u003cli\u003eInstall a Hugo theme\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can find Hugo themes everywhere. Some good sites I like to use are:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://jamstackthemes.dev/ssg/hugo/\"\u003ehttps://jamstackthemes.dev/ssg/hugo/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://hugothemesfree.com/\"\u003ehttps://hugothemesfree.com/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://gethugothemes.com/shop\"\u003ehttps://gethugothemes.com/shop\u003c/a\u003e (Paid)\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eOnce you have found a Hugo theme you like, get the repository URL and add it as a submodule:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003egit submodule add https://github.com/theNewDynamic/gohugo-theme-ananke themes/ananke\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003col start=\"3\"\u003e\n\u003cli\u003eStart Hugo server\u003c/li\u003e\n\u003c/ol\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003ehugo server\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003ch2 id=\"customization\"\u003eCustomization\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003eNOTE: This section depends heavily on what type of site you\u0026rsquo;re making and which theme is being used.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHugo is highly customizable, allowing you to alter the appearance and functionality of your website to meet your needs.\u003c/p\u003e\n\u003cp\u003eSome of the aspects of your Hugo site that you can customize include:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eLayout and Design\u003c/li\u003e\n\u003cli\u003eNavigation and menu structure\u003c/li\u003e\n\u003cli\u003eContent Organization and Hierarchy\u003c/li\u003e\n\u003cli\u003eMetadata\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eYou can also add custom shortcodes and templates to extend the functionality of your site and integrate it with other tools and platforms.\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRemember: To customize a theme, you can\u0026rsquo;t have it as a git submodule. Clone it as a folder in your repo and alter the code.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2 id=\"deployment\"\u003eDeployment\u003c/h2\u003e\n\u003cp\u003eThe great thing about Hugo is that it\u0026rsquo;s a \u003cem\u003estatic-site generator\u003c/em\u003e, meaning you can host your site on something like \u003ca href=\"https://pages.github.com/\"\u003eGitHub Pages\u003c/a\u003e, \u003ca href=\"https://netlify.app/\"\u003eNetlify\u003c/a\u003e or \u003ca href=\"https://static.app/\"\u003eStatic.app\u003c/a\u003e for free.\u003c/p\u003e\n\u003cp\u003eFor this blog post I will keep it simple and use GitHub Pages. Before we can host anything, we first need to build and \u003ca href=\"https://gohugo.io/hugo-pipes/minification/\"\u003eminify\u003c/a\u003e the project.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eThe minify stage simply reduces the size of the built files\u003c/li\u003e\n\u003cli\u003eThe build stage converts the \u003ccode\u003e.md\u003c/code\u003e files into \u003ccode\u003e.html\u003c/code\u003e files, ready to be hosted on a service of your choice.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eYou can find a working example of a GitHub Action that does these things \u003ca href=\"https://github.com/pippinmole/ruffles.github.io/blob/main/.github/workflows/publish.yml\"\u003ehere\u003c/a\u003e. The action performs the following every time a push occurs:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eInstall Hugo on the build server\u003c/li\u003e\n\u003cli\u003eBuilds the project\u003c/li\u003e\n\u003cli\u003eDeploys the built files to a new branch called \u0026lsquo;gh-pages\u0026rsquo;.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eGreat! Now, every time we push to branch \u0026lsquo;main\u0026rsquo;, a build gets psuhed to \u0026lsquo;gh-pages\u0026rsquo;\u0026hellip; Let\u0026rsquo;s make this branch useful!\u003c/p\u003e\n\u003cp\u003eSetting up GitHub Pages is easy. Navigate to your repository, \u003ccode\u003eSettings \u0026gt; Pages\u003c/code\u003e and select the branch to deploy from.\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/using-hugo/ghpages.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eDone! Your Hugo website should be available at the URL provided by GitHub Pages.\u003c/p\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eI have had a great experience using Hugo. It has a fast compilation time, is easy to use, offers a wide selection of excellent themes, and has a supportive community.\u003c/p\u003e\n\u003cp\u003eMy portfolio site took a matter of hours to get from an empty repository to a working theme installed and layout working. Compared to my \u003ca href=\"https://old.ruffles.pw/\"\u003eold portfolio site\u003c/a\u003e, adding blog posts and even changing the layout of the site is much quicker.\u003c/p\u003e\n\u003cp\u003e\u0026hellip; And I\u0026rsquo;m not done! I\u0026rsquo;m still writing blog posts and exploring new themes to test out.\u003c/p\u003e\n","description":"Using Hugo (and themes) to make a portfolio site.","image":null,"permalink":"https://hugo-profile.netlify.app/posts/hugo-portfolio/","title":"Hugo: Making a portfolio site"},{"content":"\u003ch1 id=\"introduction\"\u003eIntroduction\u003c/h1\u003e\n\u003cp\u003eVue.js and React.js are two popular JavaScript libraries for building user interfaces (UI) and single-page applications (SPAs). Both libraries are widely used in the web development community and have a strong following among developers.\u003c/p\u003e\n\u003cp\u003eVue.js, which was created by Evan You in 2014, is a progressive framework that is designed to be incrementally adoptable, meaning that it can be easily integrated into a project in small pieces rather than all at once.\u003c/p\u003e\n\u003cp\u003eReact.js, on the other hand, was developed by Facebook in 2013 and is known for its virtual DOM (Document Object Model) system, which allows for efficient rendering of UI components.\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"https://2muchcoffee.com/blog/content/images/2021/11/The-Most-Popular-Web-Frameworks--According-to-Stack-Overflow-report-.png\"    style=\"height:450px\"  /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eBoth Vue.js and React.js offer a rich set of features and tools for building modern web applications, including components, state management, and performance optimizations. Ultimately, the choice between the two will depend on the specific needs and goals of a project.\u003c/p\u003e\n\u003ch1 id=\"my-plan\"\u003eMy Plan\u003c/h1\u003e\n\u003cp\u003eI had the idea of learning Vue.js and React together. This idea was sparked by the amount of job positions I found requiring that you had at least one of the two frameworks as a skill, and since I didn\u0026rsquo;t know any, .\u003c/p\u003e\n\u003cp\u003eNext up was to think of a website idea that I could implement using front-end only. And then I thought: what better than a \u003cstrong\u003eweather app\u003c/strong\u003e. It\u0026rsquo;s simple (so I can rapidly prototype), and also involves getting data from an external source (asynchronous code incoming).\u003c/p\u003e\n\u003cp\u003eSo I set up two repositories:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eVue.js Weather App: \u003ca href=\"https://github.com/pippinmole/test-weather-project/\"\u003ehttps://github.com/pippinmole/test-weather-project/\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003eReact Weather App: \u003ca href=\"https://github.com/pippinmole/test-weather-react-app/\"\u003ehttps://github.com/pippinmole/test-weather-react-app/\u003c/a\u003e\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eThey will implement pretty much exactly the same front-end style, but obviously one will be written using React, and the other using Vue.js.\u003c/p\u003e\n\u003cp\u003eThe IDE I chose to use was \u003ca href=\"https://www.jetbrains.com/webstorm/\"\u003eIntelliJ WebStorm\u003c/a\u003e. This pretty much boiled down to the fact that it has good auto-complete and suggestions.\u003c/p\u003e\n\u003cp\u003eFor the front-end styling, I decided to use \u003ca href=\"https://getbootstrap.com/\"\u003eBootstrap\u003c/a\u003e (and \u003ca href=\"https://icons.getbootstrap.com/\"\u003eBootstrap Icons\u003c/a\u003e) because they have well designed pre-made components which I can use.\u003c/p\u003e\n\u003cp\u003eAnd finally, to deploy the code, I used \u003ca href=\"https://vercel.com/\"\u003eVercel\u003c/a\u003e because it takes literally 2 minutes to set up auto-deployment from GitHub.\u003c/p\u003e\n\u003ch1 id=\"comparison\"\u003eComparison\u003c/h1\u003e\n\u003ch2 id=\"state-management\"\u003eState Management\u003c/h2\u003e\n\u003cp\u003eA nice metric to measure a framework\u0026rsquo;s simplicity is how its code looks in different scenarios. I created a button that simply increments a counter and displays the updated result of each click.\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/react-vs-vuejs-firstlook/increment-value.jpg\"    style=\"height:250px\"  /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eA common criticism React gets is something called \u003ca href=\"https://www.geeksforgeeks.org/what-to-understand-callback-and-callback-hell-in-javascript/\"\u003e\u0026lsquo;callback hell\u0026rsquo;\u003c/a\u003e. It\u0026rsquo;s where lots of callbacks are nested and so the code becomes difficult to understand.\u003c/p\u003e\n\u003cp\u003eAlthough Vue.js consumes more lines of code for the same result, my opinion is that it is cleaner and more functional that React\u0026rsquo;s approach. This is because, given an example of asynchronous code where you may be awaiting a response from an API, all you have to do is set the state variable and let Vue update the DOM automatically. With React, you are required to call the state hook with the new value which is only available to you in certain instances.\u003c/p\u003e\n\u003ch2 id=\"learning-curve\"\u003eLearning Curve\u003c/h2\u003e\n\u003cp\u003eVue.js is by far the easier language to learn over React because of the simplicity of it. React uses alot of technical features such as \u003ccode\u003euseEffect\u003c/code\u003e, convoluted \u0026lsquo;dependency\u0026rsquo; watching (it takes experience to understand how it works), while Vue.js is pretty simple to understand.\u003c/p\u003e\n\u003ch2 id=\"bundle-size\"\u003eBundle Size\u003c/h2\u003e\n\u003cp\u003eVue.js wins this in my limited testing that I\u0026rsquo;ve had. For my \u003ca href=\"#updating-a-state-variable\"\u003etest increment button\u003c/a\u003e, the JavaScript client bundle for Vue.js was \u003ccode\u003e288.10kB\u003c/code\u003e and the React bundle was \u003ccode\u003e357.31kB\u003c/code\u003e (a 21% difference).\u003c/p\u003e\n\u003cp\u003eThis does however depend heavily on:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eWhich \u003ccode\u003enpm\u003c/code\u003e packages are installed and imported into the project\u003c/li\u003e\n\u003cli\u003eHow much custom code is in the codebase\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eBoth React and Vue projects used the minimal amount of packages necessary to run. Both frameworks minimize the amount of JavaScript served at build time.\u003c/p\u003e\n\u003cp\u003eYou can use npm packages such as \u003ca href=\"https://www.npmjs.com/package/compression\"\u003ecompression\u003c/a\u003e that reduce the bundle size, but at the cost of the CPU.\u003c/p\u003e\n\u003ch2 id=\"build-times\"\u003eBuild Times\u003c/h2\u003e\n\u003cp\u003eVue.js definitely wins on build times; React takes roughly 4.5 seconds to start up, while Vue.js takes a mere 0.9s.\u003c/p\u003e\n\u003cp\u003eOn top of this, hot-reloading is quicker with Vue.js, as it reloads quick enough to allow me to tab into a browser and see the effects instantly, while I have to wait a few moments for React to recompile and refresh the browser. While this is a statistically minimal difference in times, you can definitely notice it when rapidly prototyping.\u003c/p\u003e\n\u003ch2 id=\"community-and-ecosystem\"\u003eCommunity and Ecosystem\u003c/h2\u003e\n\u003cp\u003eBoth React and Vue.js have very large communities and great official documentation on their websites. It seems that JavaScript libraries are pretty \u0026lsquo;main-stream\u0026rsquo;, so there\u0026rsquo;s no unique situation that\u0026rsquo;s never been asked before on StackOverflow.\u003c/p\u003e\n\u003cp\u003ePersonally, I found this \u003ca href=\"https://discord.gg/javascript-mastery-programming-coding-community-710138849350647871\"\u003every helpful discord\u003c/a\u003e full of people who use both frameworks. It has 16k+ users with quite a few regular helpers.\u003c/p\u003e\n\u003ch1 id=\"conclusion\"\u003eConclusion\u003c/h1\u003e\n\u003cp\u003eIn conclusion, if I were to create a project frontend, I would choose to use Vue.js over React due to its simplicity and ease of use. Vue.js is a lightweight and flexible JavaScript library that allows developers to build user interfaces quickly and efficiently.\u003c/p\u003e\n\u003cp\u003eI will definitely be using both of the frameworks more over this year in order to learn more and become competent if I were to get into a job requiring these skills. It\u0026rsquo;s definitely different to anything I\u0026rsquo;ve used in my time developing web applications, since all of my experience has been with server-side rendering.\u003c/p\u003e\n","description":"My experience with Vue and React","image":null,"permalink":"https://hugo-profile.netlify.app/posts/react-vs-vue-firstlook/","title":"React vs Vue: First Look"},{"content":"\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/k8s-overview.png\"    style=\"height:300px;width:auto\"  /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003e\u003ca href=\"https://kubernetes.io/\"\u003eKubernetes\u003c/a\u003e is an open-source tool predominantly used by big tech companies to scale and manage their applications.\u003c/p\u003e\n\u003cp\u003eWhile I am not a big tech company (yet), I thought it best that I learn how to use it should the case arise that I may need it.\u003c/p\u003e\n\u003ch2 id=\"the-plan\"\u003eThe Plan\u003c/h2\u003e\n\u003cp\u003eThe general idea was to have some sort of simple service sat behind Kubernetes that demonstrates that the service is truly scaled and the load is balanced between nodes.\u003c/p\u003e\n\u003ch2 id=\"the-cluster\"\u003eThe Cluster\u003c/h2\u003e\n\u003ch3 id=\"what-is-a-cluster\"\u003eWhat is a Cluster?\u003c/h3\u003e\n\u003cp\u003eA cluster put simply, is \u0026lsquo;A grouping of nodes that run containerized apps in an efficient, automated, distributed, and scalable manner\u0026rsquo;; it\u0026rsquo;s what Kubernetes uses as a \u0026lsquo;pool\u0026rsquo; of nodes to scale your application from.\u003c/p\u003e\n\u003ch3 id=\"creating-the-cluster\"\u003eCreating the Cluster\u003c/h3\u003e\n\u003cp\u003eI decided to use DigitalOcean, mainly because I have a student account with them + some credits from a previous project. They make it really easy to spin up resources with them:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/creating-a-cluster-1.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eCreating a K8s Cluster on the DigitalOcean dashboard\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eI left all the settings as default, except for the cluster capacity, which I set to 2 (the minimum value). This is because cluster nodes are expensive and for a proof-of-concept, 2 is enough:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/creating-a-cluster-2.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eChoosing cluster capacity\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eThey provide a nice step-by-step tutorial on how to connect and deploy to the cluster:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/cluster-stepbystep.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA step-by-step guide on how to deploy to the cluster\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eFollowing this tutorial, the next step was to install doctl so I could automatically renew the cluster\u0026rsquo;s certificate. I used \u003ca href=\"https://docs.digitalocean.com/reference/doctl/how-to/install/\"\u003ethis guide\u003c/a\u003e to download and authenticate with my DigitalOcean account (so I can access my resources).\u003c/p\u003e\n\u003cp\u003eThen, I ran this command:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003edoctl kubernetes cluster kubeconfig save 95b71baf-0b5e-450d-b984-5f512c45d49a\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u0026hellip; which adds the cluster of id \u0026lsquo;95b71baf-0b5e-450d-b984-5f512c45d49a\u0026rsquo; to my context list inside \u0026lsquo;C:\\Users\\icond\\.kube\\config\u0026rsquo; configuration file. This allows me to run commands from my local machine which affects the cluster.\u003c/p\u003e\n\u003cp\u003eI can check that the context has successfully been added by running \u003ccode\u003ekubectl config get-contexts\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/cluster-context.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eListing the contexts available on the local machine\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eNow that the cluster is created, we \u003cstrong\u003eshould\u003c/strong\u003e have a public IPv4 address for the cluser, however the dashboard doesn\u0026rsquo;t show one.\u003c/p\u003e\n\u003ch2 id=\"deploying-our-code\"\u003eDeploying our code\u003c/h2\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE:\u003c/em\u003e\u003c/strong\u003e  You can find the code used in this project \u003ca href=\"https://github.com/pippinmole/SimpleAPI\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe code used for my example was ASP.NET Core\u0026rsquo;s default Web API template, with another simple route \u0026lsquo;localhost/gethostname\u0026rsquo;. This route simply returns the name of the host, which is very helpful to visualise the load balancing working properly, as it should show different hostnames for different requests:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/gethostname-endpoint.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eGetHostName Web API endpoint\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eIf you run this on your local machine, you should get this result:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/gethostname-inuse.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eGetHostName Web API endpoint in the browser\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003ch3 id=\"creating-a-docker-image-through-github-actions\"\u003eCreating a docker image through GitHub Actions\u003c/h3\u003e\n\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE:\u003c/em\u003e\u003c/strong\u003e  I used \u003ca href=\"https://docs.github.com/en/actions/publishing-packages/publishing-docker-images\"\u003ethis GitHub Action\u003c/a\u003e from GitHub to push to the Docker Registry.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe GitHub Action builds and publishes the code from the repository into a docker image file every time you push to the main branch. This CI/CD workflow allows for seamless integration with a production environment without having to do the same steps every time you want to update the codebase.\u003c/p\u003e\n\u003ch3 id=\"creating-the-deployment\"\u003eCreating the deployment\u003c/h3\u003e\n\u003cp\u003eTo create a deployment, a config file is required. It specifies data such as what the service type is, where to pull the template from and how many replicas to display:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/create-deployment.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA deployment configuration file for SimpleAPI\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eBy saving this file and running:\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-console\" data-lang=\"console\"\u003ekubectl apply -f createsimpleapideployment.yml\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u0026hellip; a new deployment service is started.\u003c/p\u003e\n\u003cp\u003eNow, by running \u003ccode\u003ekubectl get all\u003c/code\u003e we should see all of our services, including 3 pods, specified in the \u003ccode\u003ereplicas: 3\u003c/code\u003e inside \u003ccode\u003ecreatesimpleapideployment.yml\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/kubectl-getall.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA list of all services currently running\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eWe can also see that our C# ASP.NET Core application is running in each pod by running \u003ccode\u003ekubectl logs (POD NAME)\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/kubectl-getlogspod.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA log of a pod running our ASP.NET Core application\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eGreat! It looks like it\u0026rsquo;s working so far! Unfortunately, we can\u0026rsquo;t access these services as they don\u0026rsquo;t have a public-facing IP yet. This is actually intended as we want our services to route through the load balancer. \u003cem\u003eIf the service was public, then it wouldn\u0026rsquo;t balance the load!\u003c/em\u003e\u003c/p\u003e\n\u003ch2 id=\"the-loadbalancer\"\u003eThe Loadbalancer\u003c/h2\u003e\n\u003cp\u003eThis is a separate resource to the cluster, and its job is to distribute the workload between resources in the cluster, and scale/shrink it when necessary.\u003c/p\u003e\n\u003ch3 id=\"creating-the-loadbalancer\"\u003eCreating the Loadbalancer\u003c/h3\u003e\n\u003cp\u003eThe process is pretty much the same as creating the cluster:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/creating-a-loadbalancer.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eCreating a loadbalancer on the DigitalOcean dashboard\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eThese instructions were actually very unclear - as a beginner to this sort of technology, they assumed a certain level of skill and knowledge and so I got stuck for quite a while on how to apply the configuration file, but a bit of googling and I worked it out.\u003c/p\u003e\n\u003cp\u003eTo add the loadbalancer to the list of resources, a configuration file, otherwise known as a \u0026lsquo;service config file\u0026rsquo; is \u0026lsquo;applied\u0026rsquo; to the cluster, which \u0026lsquo;binds\u0026rsquo; the two together.\u003c/p\u003e\n\u003cp\u003eSo, a file called \u003ccode\u003econfigpatch.yml\u003c/code\u003e (it can be called anything) is created, and this content is added and saved:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-yaml\" data-lang=\"yaml\"\u003e\u003cspan style=\"color:#66d9ef\"\u003eapiVersion\u003c/span\u003e: v1\n\u003cspan style=\"color:#66d9ef\"\u003ekind\u003c/span\u003e: Service\n\u003cspan style=\"color:#66d9ef\"\u003emetadata\u003c/span\u003e:\n  \u003cspan style=\"color:#66d9ef\"\u003ename\u003c/span\u003e: nginx\n  \u003cspan style=\"color:#66d9ef\"\u003eannotations\u003c/span\u003e:\n    \u003cspan style=\"color:#66d9ef\"\u003ekubernetes.digitalocean.com/load-balancer-id\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;your-load-balancer-id\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003eservice.beta.kubernetes.io/do-loadbalancer-size-unit\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003eservice.beta.kubernetes.io/do-loadbalancer-disable-lets-encrypt-dns-records\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;false\u0026#34;\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003espec\u003c/span\u003e:\n  \u003cspan style=\"color:#66d9ef\"\u003etype\u003c/span\u003e: LoadBalancer\n  \u003cspan style=\"color:#66d9ef\"\u003eselector\u003c/span\u003e:\n    \u003cspan style=\"color:#66d9ef\"\u003eapp\u003c/span\u003e: nginx-example\n  \u003cspan style=\"color:#66d9ef\"\u003eports\u003c/span\u003e:\n    - \u003cspan style=\"color:#66d9ef\"\u003ename\u003c/span\u003e: http\n      \u003cspan style=\"color:#66d9ef\"\u003eprotocol\u003c/span\u003e: TCP\n      \u003cspan style=\"color:#66d9ef\"\u003eport\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n      \u003cspan style=\"color:#66d9ef\"\u003etargetPort\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e80\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eThen we apply the configuration by running \u003ccode\u003ekubectl apply -f configpatch.yml\u003c/code\u003e. This creates a new service of type \u003ccode\u003eLoadBalancer\u003c/code\u003e:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/kubectl-apply-loadbalancer.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003ekubectl get all - With nginx as a loadbalancer service\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eWe can see that \u003ccode\u003eCLUSTER-IP\u003c/code\u003e next to \u003ccode\u003enginx\u003c/code\u003e now has a value! Success!\u003c/p\u003e\n\u003cp\u003eNow, if we navigate to \u003ccode\u003e68.183.252.131/gethostname\u003c/code\u003e, we have a response from our application!\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/loadbalancer-response.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA response from our Load balancer\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eAnd on a different machine, we can see that it uses a different \u0026lsquo;pod\u0026rsquo; to handle the request:\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/blog/kubernetes-test/loadbalancer-response-1.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA response from our Load balancer on a different machine\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003e\u003cstrong\u003eSuccess!\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"conclusion\"\u003eConclusion\u003c/h2\u003e\n\u003cp\u003eI can see Kubernetes is a very powerful tool, with lots of features that I\u0026rsquo;m sure are useful to alot of large companies looking to scale their applications. However, as an individual I don\u0026rsquo;t see it being much use for me.\u003c/p\u003e\n\u003cp\u003eThis blog post doesn\u0026rsquo;t cover even 1% of the feature-set of K8s and I probably will continue to learn about it some day. It was exciting to see the endpoint actually returning data :)\u003c/p\u003e\n","description":"My experience learning K8s + DigitalOcean","image":null,"permalink":"https://hugo-profile.netlify.app/posts/learning-k8s/","title":"My experience learning Kubernetes"},{"content":"\u003cp\u003eBscScanner is a C# library that encapsulates all Web-API endpoints exposed by \u003ca href=\"https://docs.bscscan.com/\"\u003eBscScan\u003c/a\u003e, the explorer that shows transactions on the Binance Smart Chain blockchain. It has been downloaded by \u003cstrong\u003e2,100+ people\u003c/strong\u003e on \u003ca href=\"https://www.nuget.org/packages/BscScanner\"\u003eNuGet\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThe package is split up into 3 packages:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://www.nuget.org/packages/BscScanner\"\u003eBscScanner\u003c/a\u003e - The core library containing all methods pertaining to the BscScan API\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/pippinmole/BscScanner.Extensions.Convert\"\u003eBscScanner.Extensions.Convert\u003c/a\u003e - A conversion libary to convert BNB to \u003ca href=\"https://academy.binance.com/en/glossary/gwei\"\u003eGWEI\u003c/a\u003e and back\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/pippinmole/BscScanner.Extensions.DependencyInjection\"\u003eBscScanner.Extensions.DependencyInjection\u003c/a\u003e - A dependency injection library that allows users to inject the core library\u0026rsquo;s classes into services.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe choice to split functionality into 3 packages is commonly used in .NET development. Some people may want to use the core package without dependency injection, in something such as a console application, while some may opt into using the Dependency Injection package in an ASP.NET Core application.\u003c/p\u003e\n\u003ch3 id=\"why\"\u003eWhy?\u003c/h3\u003e\n\u003cp\u003eWhy did I make these packages? At the start of 2020 I started investing in projects on the Binance Smart Chain, and soon after got the idea to make my own website that keeps track of a wallet address. I knew I needed to interact with the BscScan explorer, and so started writing classes to do this.\u003c/p\u003e\n\u003cp\u003eQuickly, I found that their API was not designed in the best way (incorrect use of status codes, json data was formatted in a strange way), and so knew my code was going to be messy.\u003c/p\u003e\n\u003cp\u003eI looked through the NuGet package library, and found that there were no .NET libraries that interacted with the BscScan explorer.\u003c/p\u003e\n\u003cfigure class=\"center\"\u003e\n    \n        \u003cimg src=\"/img/bscscanner/bscscan-nuget.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eThe other two packages were not available at the time of creating BscScanner\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eSo, I decided to task myself with creating it myself, bearing in mind, I had never made one before.\u003c/p\u003e\n\u003ch3 id=\"what\"\u003eWhat\u003c/h3\u003e\n\u003cp\u003eThe library needed to solve the problem of getting data from the blockchain:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAPI Mapping - Map a URL endpoint to a callable, awaitable method in C#.\u003c/li\u003e\n\u003cli\u003eAsynchronous methods - Web requests take time, and so awaiting the task prevents blocking of the main thread.\u003c/li\u003e\n\u003cli\u003eDependency Injection - I wanted to use this in an ASP.NET Core project, which relies heavily on DI to function.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3 id=\"how\"\u003eHow\u003c/h3\u003e\n\u003cp\u003eThe whole library revolves around a class and interface. The user of the library only has to reference the interface in their code:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003einterface\u003c/span\u003e IBscScanClient {\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e\u0026gt; GetBnbBalanceSingleAsync(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address);\n    Task\u0026lt;IEnumerable\u0026lt;BscBalance\u0026gt;\u0026gt; GetBnbBalanceMultipleAsync(IEnumerable\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\u0026gt; addresses);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetTransactionsByAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e startBlock = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e endBlock = \u003cspan style=\"color:#ae81ff\"\u003e99999999\u003c/span\u003e);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetTransactionsByHash(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e hash);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetTransactionsByBlockRange(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e startBlock = \u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e endBlock = \u003cspan style=\"color:#ae81ff\"\u003e99999999\u003c/span\u003e);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetBep20TokenTransferByContractAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e contract);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetBep20TokenTransfersByAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e contractAddress = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetErc721TokenTransfersByAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e contractAddress = \u003cspan style=\"color:#66d9ef\"\u003enull\u003c/span\u003e);\n    Task\u0026lt;IEnumerable\u0026lt;BscTransaction\u0026gt;\u0026gt; GetErc721TokenTransferByContractAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e contract);\n    Task\u0026lt;IEnumerable\u0026lt;BscBlock\u0026gt;\u0026gt; GetBlocksValidatedByAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e\u0026gt; GetAbiFromSourceAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address);\n    Task\u0026lt;IEnumerable\u0026lt;BscContract\u0026gt;\u0026gt; GetSourceCodeFromSourceAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address);\n    Task\u0026lt;BscTxStatus\u0026gt; GetTransactionReceiptStatus(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e txHash);\n    Task\u0026lt;BscBlockReward\u0026gt; GetBlockRewardByBlock(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e block);\n    Task\u0026lt;BscBlockCountdown\u0026gt; GetBlockCountdownByBlock(\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e block);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u0026gt; GetBlockNumberByTimestamp(DateTime time);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u0026gt; GetBlockNumberByTimestamp(\u003cspan style=\"color:#66d9ef\"\u003elong\u003c/span\u003e unixTime);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003eint\u003c/span\u003e\u0026gt; GetLatestBlock();\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e\u0026gt; GetTokenTotalSupply(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e\u0026gt; GetTokenCirculatingSupply(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e\u0026gt; GetAccountBalanceByContractAddress(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e contractAddress, \u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e accountAddress);\n    Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003edouble\u003c/span\u003e\u0026gt; GetBnbTotalSupply();\n    Task\u0026lt;IEnumerable\u0026lt;BscValidator\u0026gt;\u0026gt; GetBscValidators();\n    Task\u0026lt;BscBnbPrice\u0026gt; GetBnbLastPrice();\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eEach method invokes its subsequent web request and returns the formatted result:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003easync\u003c/span\u003e Task\u0026lt;\u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e\u0026gt; GetBnbBalanceSingleAsync(\u003cspan style=\"color:#66d9ef\"\u003estring\u003c/span\u003e address) {\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e url = \u003cspan style=\"color:#e6db74\"\u003e$\u0026#34;https://api.bscscan.com/api?module=account\u0026amp;action=balance\u0026amp;address={address}\u0026amp;tag=latest\u0026amp;apikey={_apiKey}\u0026#34;\u003c/span\u003e;\n    \u003cspan style=\"color:#66d9ef\"\u003evar\u003c/span\u003e obj = \u003cspan style=\"color:#66d9ef\"\u003eawait\u003c/span\u003e Get\u0026lt;BscBalanceSingleSchema\u0026gt;(_client, url);\n\n    \u003cspan style=\"color:#66d9ef\"\u003ereturn\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003efloat\u003c/span\u003e.Parse(obj.Result);\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYou may notice that I have to use \u003ccode\u003efloat.Parse(obj.Result)\u003c/code\u003e to obtain the float value from the \u003ccode\u003eBscBalanceSingleSchema\u003c/code\u003e, which is due to the fact that BscScan returns everything as string, even though JSON supports int and floats. Annoying!\u003c/p\u003e\n","description":"A C# wrapper library for the BscScan Web API, with dependency injection support.","image":null,"permalink":"https://hugo-profile.netlify.app/project/bscscanner/","title":"BscScanner"},{"content":"\u003cp\u003e\u003cstrong\u003ePlease Note\u003c/strong\u003e: This project did not get finished. \u003ca href=\"#the-downfall\"\u003eSee more here\u003c/a\u003e\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003eDecay is an open-world multiplayer low-poly game designed and programmed by myself. Some of the features include a modular building system, persistent saving,\u003c/p\u003e\n\u003ch2 id=\"the-beginning\"\u003eThe Beginning\u003c/h2\u003e\n\u003cp\u003eOne of my favourite games when I was 16 was \u003ca href=\"https://store.steampowered.com/app/252490/Rust/\"\u003eRust\u003c/a\u003e, an open-world survival game where you fight other players and raid their bases to gain items. Coincidentally the style of the game is very close to how I wanted to make my dream game.\u003c/p\u003e\n\u003cp\u003eAs a hobbyist game developer, it was always interesting looking at the underlying source code of Unity games to see how popular games worked. You can use tools such as \u003ca href=\"https://www.jetbrains.com/decompiler/\"\u003eJetBrains dotPeek\u003c/a\u003e to decompile C# DLL libraries, which is what non-IL2CPP Unity games build to.\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/jetbrains-dotpeek-assembly.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003ch2 id=\"art\"\u003eArt\u003c/h2\u003e\n\u003cp\u003eCheck out my \u003ca href=\"https://twitter.com/pippinmole\"\u003eTwitter\u003c/a\u003e to see some of the posts I made about Decay artwork.\u003c/p\u003e\n\u003cp\u003eI used \u003ca href=\"https://www.blender.org/\"\u003eBlender\u003c/a\u003e to create all my 3D models, mainly because it is simple to use and free to use. As Decay was a survival game, I decided to create models in order of how the game would progress (wood, stone THEN metal). This means I needed a tree.\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/decay-tree-1.png\"    style=\"height:300px\"  /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eHmm\u0026hellip; Not enough variation\u0026hellip; More tree.\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/decay-tree-2.png\"    style=\"height:300px\"  /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eGreat! Now I only needed a couple more things:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eAxes\u003c/li\u003e\n\u003cli\u003eGuns\u003c/li\u003e\n\u003cli\u003ePlayer Models (with animations)\u003c/li\u003e\n\u003cli\u003eBuilding blocks (foundation, wall, doorway, door, roof, ramp, beds) all in varying materials\u003c/li\u003e\n\u003cli\u003eVegetation (with shaders)\u003c/li\u003e\n\u003cli\u003e\u0026hellip;\u003c/li\u003e\n\u003c/ul\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/decay-modelshowcase.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA small collection of models made for Decay\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003eThat should be it! Just import all of the models, and we should have a working game!\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eWrong.\u003c/strong\u003e\u003c/p\u003e\n\u003ch2 id=\"networking\"\u003eNetworking\u003c/h2\u003e\n\u003cp\u003eYes I made it multiplayer, because it isn\u0026rsquo;t aleady a behemoth task to create a fully working open-world survival game.\u003c/p\u003e\n\u003cp\u003eThe networking package I used was \u003ca href=\"https://www.photonengine.com/bolt\"\u003ePhoton Bolt\u003c/a\u003e. This was because I was already familiar with the Photon ecosystem and Bolt was the latest package at the time.\u003c/p\u003e\n\u003cp\u003eBolt makes it really easy for you to implement multiplayer into a game. They support input commands, much like many of the Source projects do. This means that instead of synchronising a position every tick, you synchronise inputs and infer the positions from the inputs:\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/decay-commands.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eThis makes it harder for cheaters to fly around the map like you can find in games like Fall Guys and GTA 5.\u003c/p\u003e\n\u003ch2 id=\"steam\"\u003eSteam\u003c/h2\u003e\n\u003cp\u003eI wanted to deploy the game to Steam. This was because Rust was on Steam (contributing factor to \u003ca href=\"#the-downfall\"\u003ethe downfall\u003c/a\u003e).\u003c/p\u003e\n\u003cblockquote\u003e\n\u003cp\u003eRust sold 530,000 copies during 2020, and grossed $43 million during the year. \u003ca href=\"https://www.gamedeveloper.com/business/how-did-rust-make-1-million-in-steam-revenue-in-a-day---twice-2\"\u003eSource\u003c/a\u003e\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAlso I needed a way for servers to keep track of a user\u0026rsquo;s stats, so when a user logs on/off, they maintain their identity.\u003c/p\u003e\n\u003cp\u003eThere are a couple of good Steam libraries for Unity, both with their pros and cons:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca href=\"https://steamworks.github.io/\"\u003eSteamworks.NET\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca href=\"https://github.com/Facepunch/Facepunch.Steamworks/\"\u003eFacepunch.Steamworks\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFacepunch.Steamworks is made by \u003ca href=\"https://twitter.com/garrynewman\"\u003eGarry Newman\u003c/a\u003e, my idol, so of course I went with it. Also Steamworks.NET uses this horrible C++ style naming convention for everything:\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-cs\" data-lang=\"cs\"\u003e\u003cspan style=\"color:#66d9ef\"\u003epublic\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eSteamScript\u003c/span\u003e : MonoBehaviour {\n\t\u003cspan style=\"color:#66d9ef\"\u003eprotected\u003c/span\u003e Callback\u0026lt;GameOverlayActivated_t\u0026gt; m_GameOverlayActivated;\n\n\t\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e OnEnable() {\n\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e (SteamManager.Initialized) {\n\t\t\tm_GameOverlayActivated = Callback\u0026lt;GameOverlayActivated_t\u0026gt;.Create(OnGameOverlayActivated);\n\t\t}\n\t}\n\n\t\u003cspan style=\"color:#66d9ef\"\u003eprivate\u003c/span\u003e \u003cspan style=\"color:#66d9ef\"\u003evoid\u003c/span\u003e OnGameOverlayActivated(GameOverlayActivated_t pCallback) {\n\t\t\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e(pCallback.m_bActive != \u003cspan style=\"color:#ae81ff\"\u003e0\u003c/span\u003e) {\n\t\t\tDebug.Log(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Steam Overlay has been activated\u0026#34;\u003c/span\u003e);\n\t\t} \u003cspan style=\"color:#66d9ef\"\u003eelse\u003c/span\u003e {\n\t\t\tDebug.Log(\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;Steam Overlay has been closed\u0026#34;\u003c/span\u003e);\n\t\t}\n\t}\n}\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003eYuck.\u003c/p\u003e\n\u003ch2 id=\"the-downfall\"\u003eThe Downfall\u003c/h2\u003e\n\u003cp\u003eMany factors contributed to the downfall of Decay:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eBurning out\u003c/strong\u003e - At the time I was studying for my A Levels, and so if I wasn\u0026rsquo;t revising or in school, I was at home working on Decay.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eRidin\u0026rsquo; Solo\u003c/strong\u003e - Turns out making a fully open world low poly multiplayer survival game isn\u0026rsquo;t achievable by yourself. Who would\u0026rsquo;ve thought.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eTechnical Debt\u003c/strong\u003e - It felt like every time I wrote a bit of code, I refactored it weeks or even days later which was a massive waste of time.\u003c/li\u003e\n\u003cli\u003e\u003cstrong\u003eMoney\u003c/strong\u003e - Pro tip: Don\u0026rsquo;t develop a game in hopes of making money.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"summary\"\u003eSummary\u003c/h2\u003e\n\u003cp\u003eI have learnt so much in the time spent on this project, and I wouldn\u0026rsquo;t change it for the world. The magic about learning is finding your limits, and this is a perfect example of that.\u003c/p\u003e\n\u003cp\u003eIf I was to come back to this project, the scale of the project would drastically decrease, maybe by dropping multiplayer, or not implementing and open-world map.\u003c/p\u003e\n\u003cp\u003eWho knows, I may pick up the project if I find some free time.\u003c/p\u003e\n\u003ch2 id=\"photos-and-videos\"\u003ePhotos and Videos\u003c/h2\u003e\n\u003cp\u003eI may move this to a separate post when I find time because I have ALOT of content on the development.\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/yyp_fsBvE_I\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n\u003cp\u003e\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/decay-mainmenu.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eA little farm which is seen from the main menu\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cvideo class=\"video-shortcode\" preload=\"\" controls\u003e\n    \u003csource src=\"/img/decay/decay-modularbuilding.mp4\" type=\"\"\u003e\n    There should have been a video here but your browser does not seem\n    to support it.\n\u003c/video\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/decay/human-aiming.gif\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eScuffed inverse kinematics system\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\u003c/p\u003e\n","description":"A 3D multiplayer survival game","image":null,"permalink":"https://hugo-profile.netlify.app/project/decay/","title":"Decay"},{"content":"\u003ch3 id=\"introduction\"\u003eIntroduction\u003c/h3\u003e\n\u003cp\u003eFusion Karts is an arcade style karting game designed and created by \u003cstrong\u003eDaniel, Hucota and Me\u003c/strong\u003e. It is influenced by the Mario Kart franchise, and \u003cstrong\u003esupports multiplayer and game controllers\u003c/strong\u003e.\u003c/p\u003e\n\u003cp\u003eThe project sample can be found here: \u003ca href=\"https://doc.photonengine.com/en-us/fusion/current/samples/game-samples/fusion-karts\"\u003ehttps://doc.photonengine.com/en-us/fusion/current/samples/game-samples/fusion-karts\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"the-story\"\u003eThe Story\u003c/h3\u003e\n\u003cp\u003eIt started off when I saw that Dan and Hucota were looking for somebody to help with adding multiplayer to their game. Since I had past experience in multiplayer programming, I took the job. We started with \u003ca href=\"https://www.photonengine.com/bolt\"\u003ePhoton Bolt\u003c/a\u003e as our networking solution, as I was most familiar with Bolt.\u003c/p\u003e\n\u003cp\u003eAs time progressed, we found out that the physics simulation in Bolt wasn\u0026rsquo;t up to spec with what we wanted. When the player\u0026rsquo;s kart would collide with other karts, it would jitter and cause all sorts of issues which even the developers of Bolt couldn\u0026rsquo;t help us with.\u003c/p\u003e\n\u003cp\u003eNonetheless, we progressed through with the migration and had a few playtests. Not everything worked, but we got driving networked. This was one of our first running instances:\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/fusion-kart/bolt-first-playtest.gif\" alt=\"Gif of Kart Bolt playtest\"\u003e\u003c/p\u003e\n\u003cp\u003eIt was about this time that one of the Photon team suggested to us that we use their new networking package, \u003ca href=\"https://doc.photonengine.com/en-us/fusion/current/getting-started/fusion-intro\"\u003ePhoton Fusion\u003c/a\u003e, and that they would pay us to create a sample for them to put on their website! Bingo! They promised better physics interactions, and easier workflow, and of course, we took the offer.\u003c/p\u003e\n\u003cp\u003eThis was new technology to us, and so we had to get used to this new workflow. It was quite different to Bolt, however it was trivial to get a test project working + we even got a physic test working on the first day.\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"/img/fusion-kart/fusion-first-playtest.gif\" alt=\"Gif of first Fusion Kart playtest\"\u003e\n\u003cimg src=\"/img/fusion-kart/fusion-coin-and-bananas.gif\" alt=\"Gif of second Fusion Kart playtest\"\u003e\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/QRvlgWAnaks\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n","description":"A multiplayer kart game made in Unity, using Photon Fusion networking package. My job was to write the netcode. ","image":null,"permalink":"https://hugo-profile.netlify.app/project/fusion-karts/","title":"Fusion Karts"},{"content":"\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/getchain/getchain-frontpage.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n\u003cp\u003eGetChain is deployed to \u003ca href=\"https://getchain.dev/\"\u003ehttps://getchain.dev/\u003c/a\u003e{:target=\u0026rdquo;_blank\u0026rdquo;}.\u003cbr\u003e\nThe source code is here: \u003ca href=\"https://github.com/pippinmole/getchain/\"\u003ehttps://github.com/pippinmole/getchain/\u003c/a\u003e{:target=\u0026rdquo;_blank\u0026rdquo;}.\u003c/p\u003e\n\u003ch2 id=\"tldr\"\u003eTL;DR\u003c/h2\u003e\n\u003cp\u003eGetChain aggregates the API endpoints of these blockchains under a single domain:\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eBinance Smart Chain\u003c/li\u003e\n\u003cli\u003eEthereum\u003c/li\u003e\n\u003cli\u003eGoerli\u003c/li\u003e\n\u003cli\u003eKovan\u003c/li\u003e\n\u003cli\u003eRinkeby\u003c/li\u003e\n\u003cli\u003eRopsten\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2 id=\"technologies\"\u003eTechnologies\u003c/h2\u003e\n\u003cp\u003eGetChain was written in C# using \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-6.0\"\u003eRazor Pages\u003c/a\u003e. I decided to use Razor Pages because I needed a framework that has a backend (for user accounts, generating and storing API keys etc).\u003c/p\u003e\n\u003cp\u003eFor the database, I pretty much always go with \u003ca href=\"https://www.mongodb.com/\"\u003eMongoDB\u003c/a\u003e because it\u0026rsquo;s a NoSQL (schema based) solution, meaning I can change a database schema and not have to rewrite any SQL statements.\u003c/p\u003e\n\u003ch2 id=\"usage\"\u003eUsage\u003c/h2\u003e\n\u003cp\u003eThe front-end doesn\u0026rsquo;t need to do anything but allow a user to create an account and generate an API key, so it\u0026rsquo;s relatively simple.\u003c/p\u003e\n\u003ch4 id=\"creating-an-api-key\"\u003eCreating an API key\u003c/h4\u003e\n\u003cp\u003e\u003cimg src=\"/img/getchain/creating-api-key.gif\" alt=\"Creating an API key\"\u003e\u003c/p\u003e\n\u003ch4 id=\"using-the-api\"\u003eUsing the API\u003c/h4\u003e\n\u003cp\u003eThe homepage shows how to use the API in your program:\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/getchain/how-to-use-api.png\"    /\u003e\n    \n\n    \n\u003c/figure\u003e\n\n","description":"A website that aggregates multiple blockchain APIs into a single API endpoint. Built using ASP.NET Core's Razor Pages, with a built in REST WebAPI.","image":null,"permalink":"https://hugo-profile.netlify.app/project/getchain/","title":"GetChain"},{"content":"\u003cblockquote\u003e\n\u003cp\u003e\u003cstrong\u003e\u003cem\u003eNOTE:\u003c/em\u003e\u003c/strong\u003e  This post is ported from Illusive. You can find it \u003ca href=\"https://forum.ruffles.pw/post?id=6fa9fcfe-ab0e-4dc2-975e-b074d29ecb6d\"\u003ehere\u003c/a\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003etl;dr: It\u0026rsquo;s pretty cool you should try it\u003c/p\u003e\n\u003cp\u003eWeb development in C# (while I understand why some people hate it), is actually quite a painless process, everything seems to fit together nicely if you understand most of the concepts before starting a project.\u003c/p\u003e\n\u003cp\u003eIn fact, I got this forum working relatively easily using just the docs and a little help from some experienced users of the framework.\u003c/p\u003e\n\u003cp\u003eThe getting-started template looks like this:\u003c/p\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/aspnetcore-firstlook/aspnetcore-defaultproject.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eGetHostName Web API endpoint\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003cp\u003ePreviously to getting into web development, I was a game developer working in a C# environment, so I already had the majority skill-set to get a project up and running, and so I picked up the niches of the framework relatively quickly.\u003c/p\u003e\n\u003cp\u003eYou can take several different approaches when creating ASP.NET applications:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eCreate a \u003ca href=\"https://www.ibm.com/cloud/learn/rest-apis\"\u003eREST API\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eCreate a website application with a user interface, such as the one you\u0026rsquo;re currently on. You have a choice of \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-5.0\u0026amp;tabs=visual-studio\"\u003eRazor\u003c/a\u003e or \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/blazor/?view=aspnetcore-5.0\"\u003eBlazor pages\u003c/a\u003e.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"what-i-like\"\u003eWhat I like\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eMethod names are implicitly called, and while I understand the flexibility of this, can be EXTREMELY hard to debug things\u0026hellip; Especially when you\u0026rsquo;re handling requests.\u003c/li\u003e\n\u003cli\u003eParameters are implicitly injected - again, I understand the concept, but it\u0026rsquo;s not very beginner-friendly, especially when coming from other aspects of programming (or even C#).\u003c/li\u003e\n\u003cli\u003eSome of the features given to you (e.g. UserManager) can sometimes be annoying when it comes to customization, for example, one of the features with the user manager, is that it automatically enters the user\u0026rsquo;s data into your specified database, but also provides a crap load of (potentially useless) properties:\u003c/li\u003e\n\u003c/ol\u003e\n\u003cfigure class=\"left\"\u003e\n    \n        \u003cimg src=\"/img/blog/aspnetcore-firstlook/mongodb-record.png\"    /\u003e\n    \n\n    \n        \u003cfigcaption style=\"font-style:italic\"\u003eGetHostName Web API endpoint\u003c/figcaption\u003e\n    \n\u003c/figure\u003e\n\n\u003ch2 id=\"suggestions-for-newbies\"\u003eSuggestions for newbies\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eRead the docs.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t get mixed up between \u003ca href=\"https://dotnet.microsoft.com/apps/aspnet\"\u003eASP.NET\u003c/a\u003e, and \u003ca href=\"https://docs.microsoft.com/en-us/aspnet/core/introduction-to-aspnet-core?view=aspnetcore-5.0\"\u003eASP.NET Core\u003c/a\u003e. The former is the older (and more painful) framework.\u003c/li\u003e\n\u003cli\u003eJoin the C# community \u003ca href=\"https://discord.gg/csharp\"\u003ediscord server\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eDon\u0026rsquo;t be afraid of asking questions.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eIf you want to start learning, I highly recommend you watch these playlists:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003e\n\u003cp\u003eRazor Pages\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/3F9SpUYTB6Y\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003eModel-View-Controller\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/-pzwRwYlXMw\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\u003c/p\u003e\n\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eClear, understandable and straight to the point.\u003c/p\u003e\n\u003cp\u003eI am relatively new to ASP.NET Core development, and I still have a CRAZY amount to learn, but so far it\u0026rsquo;s been extremely fun.\u003c/p\u003e\n","description":"A first look at ASP.NET Core","image":null,"permalink":"https://hugo-profile.netlify.app/posts/aspnetcore-first-look/","title":"Should you get started with ASP.NET Core?"}]