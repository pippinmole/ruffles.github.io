<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>> Hi, I'm Jonathan ðŸ‘‹</title><link>https://ruffles.pw/</link><description>Recent content on > Hi, I'm Jonathan ðŸ‘‹</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 25 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ruffles.pw/index.xml" rel="self" type="application/rss+xml"/><item><title>BscScanner</title><link>https://ruffles.pw/project/bscscanner/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/bscscanner/</guid><description>BscScanner is a C# library that encapsulates all Web-API endpoints exposed by BscScan, the explorer that shows transactions on the Binance Smart Chain blockchain. It has been downloaded by 2,100+ people on NuGet.
The package is split up into 3 packages:
BscScanner - The core library containing all methods pertaining to the BscScan API BscScanner.Extensions.Convert - A conversion libary to convert BNB to GWEI and back BscScanner.Extensions.DependencyInjection - A dependency injection library that allows users to inject the core library&amp;rsquo;s classes into services.</description></item><item><title>Decay</title><link>https://ruffles.pw/project/decay/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/decay/</guid><description>Please Note: This project did not get finished. See more here
TL;DR Decay is an open-world multiplayer low-poly game designed and programmed by myself. Some of the features include a modular building system, persistent saving,
The Beginning One of my favourite games when I was 16 was Rust, an open-world survival game where you fight other players and raid their bases to gain items. Coincidentally the style of the game is very close to how I wanted to make my dream game.</description></item><item><title>Illusive</title><link>https://ruffles.pw/project/illusive/</link><pubDate>Wed, 22 Dec 2021 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/illusive/</guid><description/></item><item><title>Fusion Karts</title><link>https://ruffles.pw/project/fusion-karts/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/fusion-karts/</guid><description>Introduction Fusion Karts is an arcade style karting game designed and created by Daniel, Hucota and Me. It is influenced by the Mario Kart franchise, and supports multiplayer and game controllers.
The project sample can be found here: https://doc.photonengine.com/en-us/fusion/current/samples/game-samples/fusion-karts
The Story It started off when I saw that Dan and Hucota were looking for somebody to help with adding multiplayer to their game. Since I had past experience in multiplayer programming, I took the job.</description></item><item><title>GetChain</title><link>https://ruffles.pw/project/getchain/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/getchain/</guid><description>GetChain is deployed to https://getchain.dev/{:target=&amp;rdquo;_blank&amp;rdquo;}.
The source code is here: https://github.com/pippinmole/getchain/{:target=&amp;rdquo;_blank&amp;rdquo;}.
TL;DR GetChain aggregates the API endpoints of these blockchains under a single domain:
Binance Smart Chain Ethereum Goerli Kovan Rinkeby Ropsten Technologies GetChain was written in C# using Razor Pages. I decided to use Razor Pages because I needed a framework that has a backend (for user accounts, generating and storing API keys etc).
For the database, I pretty much always go with MongoDB because it&amp;rsquo;s a NoSQL (schema based) solution, meaning I can change a database schema and not have to rewrite any SQL statements.</description></item></channel></rss>