<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Projects on > Hi, I'm Jonathan ðŸ‘‹</title><link>https://ruffles.pw/project/</link><description>Recent content in Projects on > Hi, I'm Jonathan ðŸ‘‹</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Fri, 25 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://ruffles.pw/project/index.xml" rel="self" type="application/rss+xml"/><item><title>BscScanner</title><link>https://ruffles.pw/project/bscscanner/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/bscscanner/</guid><description>BscScanner is a C# library that encapsulates all Web-API endpoints exposed by BscScan, the explorer that shows transactions on the Binance Smart Chain blockchain. It has been downloaded by 2,100+ people on NuGet.
The package is split up into 3 packages:
BscScanner - The core library containing all methods pertaining to the BscScan API BscScanner.Extensions.Convert - A conversion libary to convert BNB to GWEI and back BscScanner.Extensions.DependencyInjection - A dependency injection library that allows users to inject the core library&amp;rsquo;s classes into services.</description><content type="html"><![CDATA[<p>BscScanner is a C# library that encapsulates all Web-API endpoints exposed by <a href="https://docs.bscscan.com/">BscScan</a>, the explorer that shows transactions on the Binance Smart Chain blockchain. It has been downloaded by <strong>2,100+ people</strong> on <a href="https://www.nuget.org/packages/BscScanner">NuGet</a>.</p>
<p>The package is split up into 3 packages:</p>
<ul>
<li><a href="https://www.nuget.org/packages/BscScanner">BscScanner</a> - The core library containing all methods pertaining to the BscScan API</li>
<li><a href="https://github.com/pippinmole/BscScanner.Extensions.Convert">BscScanner.Extensions.Convert</a> - A conversion libary to convert BNB to <a href="https://academy.binance.com/en/glossary/gwei">GWEI</a> and back</li>
<li><a href="https://github.com/pippinmole/BscScanner.Extensions.DependencyInjection">BscScanner.Extensions.DependencyInjection</a> - A dependency injection library that allows users to inject the core library&rsquo;s classes into services.</li>
</ul>
<p>The choice to split functionality into 3 packages is commonly used in .NET development. Some people may want to use the core package without dependency injection, in something such as a console application, while some may opt into using the Dependency Injection package in an ASP.NET Core application.</p>
<h3 id="why">Why?</h3>
<p>Why did I make these packages? At the start of 2020 I started investing in projects on the Binance Smart Chain, and soon after got the idea to make my own website that keeps track of a wallet address. I knew I needed to interact with the BscScan explorer, and so started writing classes to do this.</p>
<p>Quickly, I found that their API was not designed in the best way (incorrect use of status codes, json data was formatted in a strange way), and so knew my code was going to be messy.</p>
<p>I looked through the NuGet package library, and found that there were no .NET libraries that interacted with the BscScan explorer.</p>
<figure class="center">
    
        <img src="/img/bscscanner/bscscan-nuget.png"    />
    

    
        <figcaption style="font-style:italic">The other two packages were not available at the time of creating BscScanner</figcaption>
    
</figure>

<p>So, I decided to task myself with creating it myself, bearing in mind, I had never made one before.</p>
<h3 id="what">What</h3>
<p>The library needed to solve the problem of getting data from the blockchain:</p>
<ul>
<li>API Mapping - Map a URL endpoint to a callable, awaitable method in C#.</li>
<li>Asynchronous methods - Web requests take time, and so awaiting the task prevents blocking of the main thread.</li>
<li>Dependency Injection - I wanted to use this in an ASP.NET Core project, which relies heavily on DI to function.</li>
</ul>
<h3 id="how">How</h3>
<p>The whole library revolves around a class and interface. The user of the library only has to reference the interface in their code:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">interface</span> IBscScanClient {
    Task&lt;<span style="color:#66d9ef">float</span>&gt; GetBnbBalanceSingleAsync(<span style="color:#66d9ef">string</span> address);
    Task&lt;IEnumerable&lt;BscBalance&gt;&gt; GetBnbBalanceMultipleAsync(IEnumerable&lt;<span style="color:#66d9ef">string</span>&gt; addresses);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetTransactionsByAddress(<span style="color:#66d9ef">string</span> address, <span style="color:#66d9ef">int</span> startBlock = <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">int</span> endBlock = <span style="color:#ae81ff">99999999</span>);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetTransactionsByHash(<span style="color:#66d9ef">string</span> hash);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetTransactionsByBlockRange(<span style="color:#66d9ef">int</span> startBlock = <span style="color:#ae81ff">1</span>, <span style="color:#66d9ef">int</span> endBlock = <span style="color:#ae81ff">99999999</span>);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetBep20TokenTransferByContractAddress(<span style="color:#66d9ef">string</span> contract);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetBep20TokenTransfersByAddress(<span style="color:#66d9ef">string</span> address = <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">string</span> contractAddress = <span style="color:#66d9ef">null</span>);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetErc721TokenTransfersByAddress(<span style="color:#66d9ef">string</span> address = <span style="color:#66d9ef">null</span>, <span style="color:#66d9ef">string</span> contractAddress = <span style="color:#66d9ef">null</span>);
    Task&lt;IEnumerable&lt;BscTransaction&gt;&gt; GetErc721TokenTransferByContractAddress(<span style="color:#66d9ef">string</span> contract);
    Task&lt;IEnumerable&lt;BscBlock&gt;&gt; GetBlocksValidatedByAddress(<span style="color:#66d9ef">string</span> address);
    Task&lt;<span style="color:#66d9ef">string</span>&gt; GetAbiFromSourceAddress(<span style="color:#66d9ef">string</span> address);
    Task&lt;IEnumerable&lt;BscContract&gt;&gt; GetSourceCodeFromSourceAddress(<span style="color:#66d9ef">string</span> address);
    Task&lt;BscTxStatus&gt; GetTransactionReceiptStatus(<span style="color:#66d9ef">string</span> txHash);
    Task&lt;BscBlockReward&gt; GetBlockRewardByBlock(<span style="color:#66d9ef">int</span> block);
    Task&lt;BscBlockCountdown&gt; GetBlockCountdownByBlock(<span style="color:#66d9ef">int</span> block);
    Task&lt;<span style="color:#66d9ef">int</span>&gt; GetBlockNumberByTimestamp(DateTime time);
    Task&lt;<span style="color:#66d9ef">int</span>&gt; GetBlockNumberByTimestamp(<span style="color:#66d9ef">long</span> unixTime);
    Task&lt;<span style="color:#66d9ef">int</span>&gt; GetLatestBlock();
    Task&lt;<span style="color:#66d9ef">double</span>&gt; GetTokenTotalSupply(<span style="color:#66d9ef">string</span> address);
    Task&lt;<span style="color:#66d9ef">double</span>&gt; GetTokenCirculatingSupply(<span style="color:#66d9ef">string</span> address);
    Task&lt;<span style="color:#66d9ef">double</span>&gt; GetAccountBalanceByContractAddress(<span style="color:#66d9ef">string</span> contractAddress, <span style="color:#66d9ef">string</span> accountAddress);
    Task&lt;<span style="color:#66d9ef">double</span>&gt; GetBnbTotalSupply();
    Task&lt;IEnumerable&lt;BscValidator&gt;&gt; GetBscValidators();
    Task&lt;BscBnbPrice&gt; GetBnbLastPrice();
}
</code></pre></div><p>Each method invokes its subsequent web request and returns the formatted result:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">async</span> Task&lt;<span style="color:#66d9ef">float</span>&gt; GetBnbBalanceSingleAsync(<span style="color:#66d9ef">string</span> address) {
    <span style="color:#66d9ef">var</span> url = <span style="color:#e6db74">$&#34;https://api.bscscan.com/api?module=account&amp;action=balance&amp;address={address}&amp;tag=latest&amp;apikey={_apiKey}&#34;</span>;
    <span style="color:#66d9ef">var</span> obj = <span style="color:#66d9ef">await</span> Get&lt;BscBalanceSingleSchema&gt;(_client, url);

    <span style="color:#66d9ef">return</span> <span style="color:#66d9ef">float</span>.Parse(obj.Result);
}
</code></pre></div><p>You may notice that I have to use <code>float.Parse(obj.Result)</code> to obtain the float value from the <code>BscBalanceSingleSchema</code>, which is due to the fact that BscScan returns everything as string, even though JSON supports int and floats. Annoying!</p>
]]></content></item><item><title>Decay</title><link>https://ruffles.pw/project/decay/</link><pubDate>Sun, 16 Jan 2022 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/decay/</guid><description>Please Note: This project did not get finished. See more here
TL;DR Decay is an open-world multiplayer low-poly game designed and programmed by myself. Some of the features include a modular building system, persistent saving,
The Beginning One of my favourite games when I was 16 was Rust, an open-world survival game where you fight other players and raid their bases to gain items. Coincidentally the style of the game is very close to how I wanted to make my dream game.</description><content type="html"><![CDATA[<p><strong>Please Note</strong>: This project did not get finished. <a href="#the-downfall">See more here</a></p>
<h2 id="tldr">TL;DR</h2>
<p>Decay is an open-world multiplayer low-poly game designed and programmed by myself. Some of the features include a modular building system, persistent saving,</p>
<h2 id="the-beginning">The Beginning</h2>
<p>One of my favourite games when I was 16 was <a href="https://store.steampowered.com/app/252490/Rust/">Rust</a>, an open-world survival game where you fight other players and raid their bases to gain items. Coincidentally the style of the game is very close to how I wanted to make my dream game.</p>
<p>As a hobbyist game developer, it was always interesting looking at the underlying source code of Unity games to see how popular games worked. You can use tools such as <a href="https://www.jetbrains.com/decompiler/">JetBrains dotPeek</a> to decompile C# DLL libraries, which is what non-IL2CPP Unity games build to.</p>
<figure class="left">
    
        <img src="/img/decay/jetbrains-dotpeek-assembly.png"    />
    

    
</figure>

<h2 id="art">Art</h2>
<p>Check out my <a href="https://twitter.com/pippinmole">Twitter</a> to see some of the posts I made about Decay artwork.</p>
<p>I used <a href="https://www.blender.org/">Blender</a> to create all my 3D models, mainly because it is simple to use and free to use. As Decay was a survival game, I decided to create models in order of how the game would progress (wood, stone THEN metal). This means I needed a tree.</p>
<figure class="left">
    
        <img src="/img/decay/decay-tree-1.png"    style="height:300px"  />
    

    
</figure>

<p>Hmm&hellip; Not enough variation&hellip; More tree.</p>
<figure class="left">
    
        <img src="/img/decay/decay-tree-2.png"    style="height:300px"  />
    

    
</figure>

<p>Great! Now I only needed a couple more things:</p>
<ul>
<li>Axes</li>
<li>Guns</li>
<li>Player Models (with animations)</li>
<li>Building blocks (foundation, wall, doorway, door, roof, ramp, beds) all in varying materials</li>
<li>Vegetation (with shaders)</li>
<li>&hellip;</li>
</ul>
<figure class="left">
    
        <img src="/img/decay/decay-modelshowcase.png"    />
    

    
        <figcaption style="font-style:italic">A small collection of models made for Decay</figcaption>
    
</figure>

<p>That should be it! Just import all of the models, and we should have a working game!</p>
<p><strong>Wrong.</strong></p>
<h2 id="networking">Networking</h2>
<p>Yes I made it multiplayer, because it isn&rsquo;t aleady a behemoth task to create a fully working open-world survival game.</p>
<p>The networking package I used was <a href="https://www.photonengine.com/bolt">Photon Bolt</a>. This was because I was already familiar with the Photon ecosystem and Bolt was the latest package at the time.</p>
<p>Bolt makes it really easy for you to implement multiplayer into a game. They support input commands, much like many of the Source projects do. This means that instead of synchronising a position every tick, you synchronise inputs and infer the positions from the inputs:</p>
<figure class="left">
    
        <img src="/img/decay/decay-commands.png"    />
    

    
</figure>

<p>This makes it harder for cheaters to fly around the map like you can find in games like Fall Guys and GTA 5.</p>
<h2 id="steam">Steam</h2>
<p>I wanted to deploy the game to Steam. This was because Rust was on Steam (contributing factor to <a href="#the-downfall">the downfall</a>).</p>
<blockquote>
<p>Rust sold 530,000 copies during 2020, and grossed $43 million during the year. <a href="https://www.gamedeveloper.com/business/how-did-rust-make-1-million-in-steam-revenue-in-a-day---twice-2">Source</a></p>
</blockquote>
<p>Also I needed a way for servers to keep track of a user&rsquo;s stats, so when a user logs on/off, they maintain their identity.</p>
<p>There are a couple of good Steam libraries for Unity, both with their pros and cons:</p>
<ul>
<li><a href="https://steamworks.github.io/">Steamworks.NET</a></li>
<li><a href="https://github.com/Facepunch/Facepunch.Steamworks/">Facepunch.Steamworks</a></li>
</ul>
<p>Facepunch.Steamworks is made by <a href="https://twitter.com/garrynewman">Garry Newman</a>, my idol, so of course I went with it. Also Steamworks.NET uses this horrible C++ style naming convention for everything:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-cs" data-lang="cs"><span style="color:#66d9ef">public</span> <span style="color:#66d9ef">class</span> <span style="color:#a6e22e">SteamScript</span> : MonoBehaviour {
	<span style="color:#66d9ef">protected</span> Callback&lt;GameOverlayActivated_t&gt; m_GameOverlayActivated;

	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> OnEnable() {
		<span style="color:#66d9ef">if</span> (SteamManager.Initialized) {
			m_GameOverlayActivated = Callback&lt;GameOverlayActivated_t&gt;.Create(OnGameOverlayActivated);
		}
	}

	<span style="color:#66d9ef">private</span> <span style="color:#66d9ef">void</span> OnGameOverlayActivated(GameOverlayActivated_t pCallback) {
		<span style="color:#66d9ef">if</span>(pCallback.m_bActive != <span style="color:#ae81ff">0</span>) {
			Debug.Log(<span style="color:#e6db74">&#34;Steam Overlay has been activated&#34;</span>);
		} <span style="color:#66d9ef">else</span> {
			Debug.Log(<span style="color:#e6db74">&#34;Steam Overlay has been closed&#34;</span>);
		}
	}
}
</code></pre></div><p>Yuck.</p>
<h2 id="the-downfall">The Downfall</h2>
<p>Many factors contributed to the downfall of Decay:</p>
<ul>
<li><strong>Burning out</strong> - At the time I was studying for my A Levels, and so if I wasn&rsquo;t revising or in school, I was at home working on Decay.</li>
<li><strong>Ridin&rsquo; Solo</strong> - Turns out making a fully open world low poly multiplayer survival game isn&rsquo;t achievable by yourself. Who would&rsquo;ve thought.</li>
<li><strong>Technical Debt</strong> - It felt like every time I wrote a bit of code, I refactored it weeks or even days later which was a massive waste of time.</li>
<li><strong>Money</strong> - Pro tip: Don&rsquo;t develop a game in hopes of making money.</li>
</ul>
<h2 id="summary">Summary</h2>
<p>I have learnt so much in the time spent on this project, and I wouldn&rsquo;t change it for the world. The magic about learning is finding your limits, and this is a perfect example of that.</p>
<p>If I was to come back to this project, the scale of the project would drastically decrease, maybe by dropping multiplayer, or not implementing and open-world map.</p>
<p>Who knows, I may pick up the project if I find some free time.</p>
<h2 id="photos-and-videos">Photos and Videos</h2>
<p>I may move this to a separate post when I find time because I have ALOT of content on the development.</p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/yyp_fsBvE_I" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

<p><figure class="left">
    
        <img src="/img/decay/decay-mainmenu.png"    />
    

    
        <figcaption style="font-style:italic">A little farm which is seen from the main menu</figcaption>
    
</figure>

<video class="video-shortcode" preload="" controls>
    <source src="/img/decay/decay-modularbuilding.mp4" type="">
    There should have been a video here but your browser does not seem
    to support it.
</video>
<figure class="left">
    
        <img src="/img/decay/human-aiming.gif"    />
    

    
        <figcaption style="font-style:italic">Scuffed inverse kinematics system</figcaption>
    
</figure>
</p>
]]></content></item><item><title>Fusion Karts</title><link>https://ruffles.pw/project/fusion-karts/</link><pubDate>Thu, 09 Dec 2021 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/fusion-karts/</guid><description>Introduction Fusion Karts is an arcade style karting game designed and created by Daniel, Hucota and Me. It is influenced by the Mario Kart franchise, and supports multiplayer and game controllers.
The project sample can be found here: https://doc.photonengine.com/en-us/fusion/current/samples/game-samples/fusion-karts
The Story It started off when I saw that Dan and Hucota were looking for somebody to help with adding multiplayer to their game. Since I had past experience in multiplayer programming, I took the job.</description><content type="html"><![CDATA[<h3 id="introduction">Introduction</h3>
<p>Fusion Karts is an arcade style karting game designed and created by <strong>Daniel, Hucota and Me</strong>. It is influenced by the Mario Kart franchise, and <strong>supports multiplayer and game controllers</strong>.</p>
<p>The project sample can be found here: <a href="https://doc.photonengine.com/en-us/fusion/current/samples/game-samples/fusion-karts">https://doc.photonengine.com/en-us/fusion/current/samples/game-samples/fusion-karts</a></p>
<h3 id="the-story">The Story</h3>
<p>It started off when I saw that Dan and Hucota were looking for somebody to help with adding multiplayer to their game. Since I had past experience in multiplayer programming, I took the job. We started with <a href="https://www.photonengine.com/bolt">Photon Bolt</a> as our networking solution, as I was most familiar with Bolt.</p>
<p>As time progressed, we found out that the physics simulation in Bolt wasn&rsquo;t up to spec with what we wanted. When the player&rsquo;s kart would collide with other karts, it would jitter and cause all sorts of issues which even the developers of Bolt couldn&rsquo;t help us with.</p>
<p>Nonetheless, we progressed through with the migration and had a few playtests. Not everything worked, but we got driving networked. This was one of our first running instances:</p>
<p><img src="/img/fusion-kart/bolt-first-playtest.gif" alt="Gif of Kart Bolt playtest"></p>
<p>It was about this time that one of the Photon team suggested to us that we use their new networking package, <a href="https://doc.photonengine.com/en-us/fusion/current/getting-started/fusion-intro">Photon Fusion</a>, and that they would pay us to create a sample for them to put on their website! Bingo! They promised better physics interactions, and easier workflow, and of course, we took the offer.</p>
<p>This was new technology to us, and so we had to get used to this new workflow. It was quite different to Bolt, however it was trivial to get a test project working + we even got a physic test working on the first day.</p>
<p><img src="/img/fusion-kart/fusion-first-playtest.gif" alt="Gif of first Fusion Kart playtest">
<img src="/img/fusion-kart/fusion-coin-and-bananas.gif" alt="Gif of second Fusion Kart playtest"></p>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/QRvlgWAnaks" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>

]]></content></item><item><title>GetChain</title><link>https://ruffles.pw/project/getchain/</link><pubDate>Sun, 10 Oct 2021 00:00:00 +0000</pubDate><guid>https://ruffles.pw/project/getchain/</guid><description>GetChain is deployed to https://getchain.dev/{:target=&amp;rdquo;_blank&amp;rdquo;}.
The source code is here: https://github.com/pippinmole/getchain/{:target=&amp;rdquo;_blank&amp;rdquo;}.
TL;DR GetChain aggregates the API endpoints of these blockchains under a single domain:
Binance Smart Chain Ethereum Goerli Kovan Rinkeby Ropsten Technologies GetChain was written in C# using Razor Pages. I decided to use Razor Pages because I needed a framework that has a backend (for user accounts, generating and storing API keys etc).
For the database, I pretty much always go with MongoDB because it&amp;rsquo;s a NoSQL (schema based) solution, meaning I can change a database schema and not have to rewrite any SQL statements.</description><content type="html"><![CDATA[<figure class="left">
    
        <img src="/img/getchain/getchain-frontpage.png"    />
    

    
</figure>

<p>GetChain is deployed to <a href="https://getchain.dev/">https://getchain.dev/</a>{:target=&rdquo;_blank&rdquo;}.<br>
The source code is here: <a href="https://github.com/pippinmole/getchain/">https://github.com/pippinmole/getchain/</a>{:target=&rdquo;_blank&rdquo;}.</p>
<h2 id="tldr">TL;DR</h2>
<p>GetChain aggregates the API endpoints of these blockchains under a single domain:</p>
<ul>
<li>Binance Smart Chain</li>
<li>Ethereum</li>
<li>Goerli</li>
<li>Kovan</li>
<li>Rinkeby</li>
<li>Ropsten</li>
</ul>
<h2 id="technologies">Technologies</h2>
<p>GetChain was written in C# using <a href="https://docs.microsoft.com/en-us/aspnet/core/razor-pages/?view=aspnetcore-6.0">Razor Pages</a>. I decided to use Razor Pages because I needed a framework that has a backend (for user accounts, generating and storing API keys etc).</p>
<p>For the database, I pretty much always go with <a href="https://www.mongodb.com/">MongoDB</a> because it&rsquo;s a NoSQL (schema based) solution, meaning I can change a database schema and not have to rewrite any SQL statements.</p>
<h2 id="usage">Usage</h2>
<p>The front-end doesn&rsquo;t need to do anything but allow a user to create an account and generate an API key, so it&rsquo;s relatively simple.</p>
<h4 id="creating-an-api-key">Creating an API key</h4>
<p><img src="/img/getchain/creating-api-key.gif" alt="Creating an API key"></p>
<h4 id="using-the-api">Using the API</h4>
<p>The homepage shows how to use the API in your program:</p>
<figure class="left">
    
        <img src="/img/getchain/how-to-use-api.png"    />
    

    
</figure>

]]></content></item></channel></rss>